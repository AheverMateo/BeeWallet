import { resFail, resSuccess } from "../../config/utils/response";
import InvestmentModel from "./schema";
import { TNA, calculateEarnedInterests, getFinishDate } from "./utils";

/**
 * Allows you to create an investment.
 * must be received in the request body:
 *    - amount: number = amount to invest
 *    -
 * @param {*} req
 * @param {*} res
 */
async function createInvestment(req, res) {
   try {
      const { amount, days, walletId } = req.body;

      const earnedInterests = calculateEarnedInterests();
      const finishDate = getFinishDate(days);

      const payload = { amount, days, tna: TNA, earnedInterests, finishDate, walletId };

      const investment = new InvestmentModel(payload);

      const investmentSaved = investment.save();

      if (!investmentSaved) {
         return resFail(res, 400, "The investment could not be made");
      }

      return resSuccess(res, 201, "Investment made successfully", investmentSaved);
   } catch (error) {
      logger.error(`${error.stack}`);
      return res.status(500).json({ success: false, message: "Internal Server Error" });
   }
}

/**
 * Allows get a Investment by ID
 * The ID must be received by params
 * /investments/:id
 * @param {*} req
 * @param {*} res
 */
async function getInvestment(req, res) {
   // TODO: implement get Investment by ID
}

/**
 * Allows get all Investment generated by a wallet
 * The ID must be received by params
 * /investments/wallet/:id
 * @param {*} req
 * @param {*} res
 */
async function getAllInvestmentByWallet(req, res) {
   // TODO: implement get all Investment by wallet user
}

/**
 * Allows simulate a Investment
 * must be received in the request:
 *    - amount: number = amount to invest
 *    - days: number = days to invest
 * @param {*} req
 * @param {*} res
 */
function simulateInvestment(req, res) {
   // TODO: implement get all Investment by wallet user
}

const investmentController = {
   createInvestment,
   getAllInvestmentByWallet,
   getInvestment,
   simulateInvestment,
};

export default investmentController;
